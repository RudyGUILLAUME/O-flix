security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords

    # Rubrique de configuration de la sécurité
    # Mise en route de la sécurité
    enable_authenticator_manager: true
    # Initialisation de l'algo de chiffrement du mot de passe
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    # Le provider décrivent ou trouver les utilisateurs
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider: # app_ser_provider est un nom choisi par nous
            # Les utilisateurs seront sutués dans une entité
            entity:
                # L'entité cible est 'User'
                class: App\Entity\User
                # Quelle est la propritété utilisée piur l'identification
                property: email

    # Le firewall permet d'établir des protections par rapport aux routes 
    # définies dans le projet
    firewalls:
        
        dev:
            # Les routes qui peuvent passer sans sécurité (images, css, js, ...)
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Le firewall de notre API => à adapter selon nos besoins
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
                  
        main:
            lazy: true
            # Ou sont les utilisateurs a identifier
            provider: app_user_provider # La rubrique définie auparavent (plus haut)

            # Quel sont les formulaires de login et de logout
            form_login:
                # name of the route created previously
                login_path: login_index # GET => affiche le form
                check_path: login_index # POST => traite le form
            
            logout:
                path: login_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    # La protection des routes proprement dite
    # Les routes sont définies avec des expressions régulières
    # et pour chaque route on va exprimer quels rôles on le droit
    # d'y accéder.
    access_control:
        # Penser à utiliser bin/console debug:router pour avoir tous les motifs d'URL sous les yeux

        # Attention, les routes sont évaluées dans l'ordre de définition 
        # par symfony, la 1ere route qui 'matche' l'emporte
        # Si je mets la route ci-dessosu en 1er alors tout le site back sera 
        # utilisable par les 'ROLE_USER'
        # - { path: ^/(.*)$, roles: ROLE_USER }
    # BACK
        # page édition création (les castins seront pris en compte aussi)
        - { path: ^/back/(.*)/(new|edit), roles: ROLE_ADMIN}
        # Autre option possible
        # - { path: ^/back/(movie|user)/new, roles: ROLE_ADMIN}
        # - { path: ^/back/(movie|user)/\d+\edit, roles: ROLE_ADMIN}
        # suppression que pour les admins (méthode HTTP POST)
        - { path: ^/back/(.*)/\d+$, roles: ROLE_ADMIN, methods: [POST]} 
        # back office pour les managers, uniquement en consultation
        - { path: ^/back/, roles: ROLE_MANAGER }

        # Les ACL de notre API
        
        # Login toujours accessible
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # Toute l'API nécessite une authentification
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

    # FRONT
        # les utilisateurs doivent avoir accès aux avis
        - { path: ^/review/add/movie/\d+$, roles: ROLE_USER }
        # les utilisateurs doivent avoir accès à leur liste
        - { path: ^/favorites, roles: ROLE_USER }

    # permet de définir l'héritage des droits entre rôles
    # ici par exemple 
    #  - ROLE_ADMIN est aussi ROLE_MANAGER et ROLE_USER
    #  - ROLE_MANAGER est aussi ROLE_USER
    role_hierarchy:
        # MANAGER hérite du rôle USER
        # => si on souhaite que les managers et admins postent des critiques en leur nom
        ROLE_MANAGER: ROLE_USER
        # ADMIN hérite du rôle MANAGER
        ROLE_ADMIN: ROLE_MANAGER

# Oprimisations pour la phase de dev (limitation du temps de calcul de hashage 
# de password)
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
